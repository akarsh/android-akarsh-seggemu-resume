name: instrumentation-tests-on-push
run-name: Instrumentation Tests on Push

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        api-level: [21, 23, 29]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set Up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: temurin

      - name: Set Up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Cache Android Virtual Device (AVD)
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and Generate Snapshot for Caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Make Gradle Wrapper Executable
        run: chmod +x ./gradlew

      - name: Build Project
        run: ./gradlew build --warning-mode all

      - name: Run Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck

      - name: Upload Coverage report to Codecov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          flags: android-instrumentation
          name: instrumentation-${{ matrix.api-level }}
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
